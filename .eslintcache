[{"E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\index.js":"1","E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\screens\\Login.js":"2","E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\App.js":"3","E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\screens\\Register.js":"4","E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\history.js":"5","E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\screens\\Dashboard.js":"6","E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\components\\Sidebar.js":"7","E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\components\\TaskCard.js":"8","E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\screens\\CreateTask.js":"9","E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\screens\\CompletedTasks.js":"10","E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\components\\IncompleteTaskCard.js":"11","E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\components\\CompletedTaskCard.js":"12","E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\components\\AuthInputField.js":"13","E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\screens\\IncompleteTasks.js":"14","E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\API\\Users.js":"15","E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\config\\key.js":"16","E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\config\\prod.js":"17","E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\config\\dev.js":"18","E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\API\\Tasks.js":"19","E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\components\\AppModal.js":"20"},{"size":197,"mtime":1615452609003,"results":"21","hashOfConfig":"22"},{"size":2672,"mtime":1616047583744,"results":"23","hashOfConfig":"22"},{"size":1048,"mtime":1615876108619,"results":"24","hashOfConfig":"22"},{"size":7939,"mtime":1616083734622,"results":"25","hashOfConfig":"22"},{"size":91,"mtime":1615478456781,"results":"26","hashOfConfig":"22"},{"size":3560,"mtime":1616049357406,"results":"27","hashOfConfig":"22"},{"size":1736,"mtime":1615876842835,"results":"28","hashOfConfig":"22"},{"size":2009,"mtime":1615711925537,"results":"29","hashOfConfig":"22"},{"size":10370,"mtime":1616084275031,"results":"30","hashOfConfig":"22"},{"size":4556,"mtime":1616049570912,"results":"31","hashOfConfig":"22"},{"size":955,"mtime":1615876366640,"results":"32","hashOfConfig":"22"},{"size":1386,"mtime":1615878510509,"results":"33","hashOfConfig":"22"},{"size":1033,"mtime":1615911608999,"results":"34","hashOfConfig":"22"},{"size":2629,"mtime":1616049499622,"results":"35","hashOfConfig":"22"},{"size":126,"mtime":1615960891033,"results":"36","hashOfConfig":"22"},{"size":140,"mtime":1615961051913,"results":"37","hashOfConfig":"22"},{"size":90,"mtime":1615960188937,"results":"38","hashOfConfig":"22"},{"size":108,"mtime":1615960149505,"results":"39","hashOfConfig":"22"},{"size":126,"mtime":1616077932786,"results":"40","hashOfConfig":"22"},{"size":1665,"mtime":1616083768735,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"19b6f1k",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\index.js",[],["92","93"],"E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\screens\\Login.js",[],"E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\App.js",[],["94","95"],"E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\screens\\Register.js",[],"E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\history.js",[],["96","97"],"E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\screens\\Dashboard.js",["98"],"import React, { Component } from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\n\r\nimport \"../styles/dashboard.css\";\r\n\r\nimport defaultAvatar from \"../assets/default-avatar.png\";\r\nimport Sidebar from \"../components/Sidebar\";\r\nimport TaskCard from \"../components/TaskCard\";\r\nimport IncompleteTaskCard from \"../components/IncompleteTaskCard\";\r\nimport history from \"../history\";\r\n\r\nexport default class Dashboard extends Component {\r\n  render() {\r\n    if (localStorage.getItem(\"auth-token\")) {\r\n      return (\r\n        <div>\r\n          <Sidebar isDashboardActive=\"active\" />\r\n          <div className=\"dashboard-container pusher\">\r\n            <div className=\"dashboard-upper-segment\">\r\n              <div className=\"dashboard-upper-segment-heading\">\r\n                Welcome Back, {`{User Name}`}!\r\n              </div>\r\n              <div className=\"dashboard-upper-segment-right\">\r\n                Id: {`{User ID}`}{\" \"}\r\n                <img\r\n                  className=\"dashboard-upper-segment-avatar\"\r\n                  src={defaultAvatar}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"dashboard-middle-segment\">\r\n              <div className=\"dashboard-middle-segment-pieChart\">\r\n                <Chart\r\n                  options={{\r\n                    labels: [\"This Month\", \"This Week\", \"Today\"],\r\n                    title: {\r\n                      text: \"Tasks Completed Chart:\",\r\n                    },\r\n                    plotOptions: {\r\n                      radialBar: {\r\n                        dataLabels: {\r\n                          name: {\r\n                            show: true,\r\n                          },\r\n                          value: {\r\n                            show: true,\r\n                            fontSize: \"14px\",\r\n                            formatter: function (val) {\r\n                              return val + \"%\";\r\n                            },\r\n                          },\r\n                          total: {\r\n                            show: true,\r\n                            label: \"Total Completed\",\r\n                            formatter: function (val) {\r\n                              val =\r\n                                val.globals.seriesTotals.reduce((a, b) => {\r\n                                  return a + b;\r\n                                }, 0.0) / 3.0;\r\n                              return val.toFixed(2) + \"%\";\r\n                            },\r\n                          },\r\n                        },\r\n                      },\r\n                    },\r\n                  }}\r\n                  series={[30, 40, 45]}\r\n                  type=\"radialBar\"\r\n                />\r\n              </div>\r\n              <TaskCard cardHeading=\"Daily Tasks Analysis\" />\r\n              <TaskCard cardHeading=\"Weekly Tasks Analysis\" />\r\n              <TaskCard cardHeading=\"Monthly Tasks Analysis\" />\r\n            </div>\r\n            <div className=\"dashboard-lower-segment\">\r\n              <div className=\"dashboard-lower-segment-header\">\r\n                <div className=\"dashboard-lower-segment-heading\">\r\n                  Next Tasks:\r\n                </div>\r\n                {/* <i\r\n                  className=\"plus circle icon\"\r\n                ></i> */}\r\n              </div>\r\n\r\n              <IncompleteTaskCard />\r\n              <IncompleteTaskCard />\r\n              <IncompleteTaskCard />\r\n              <IncompleteTaskCard />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return <>{history.push(\"/Login\")}</>;\r\n  }\r\n}\r\n",["99","100"],"E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\components\\Sidebar.js",["101"],"import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"../styles/sidebar.css\";\r\n\r\nimport defaultAvatar from \"../assets/default-avatar.png\";\r\n\r\nexport default class Sidebar extends Component {\r\n  render() {\r\n    let {\r\n      isDashboardActive = \"\",\r\n      isCreatetaskActive = \"\",\r\n      isIncompletedActive = \"\",\r\n      isCompletedActive = \"\",\r\n      isStarredActive = \"\",\r\n      isDeletedActive = \"\",\r\n    } = this.props;\r\n    return (\r\n      <div class=\"ui sidebar left inverted vertical visible menu\">\r\n        <div class=\"account-item\">\r\n          <div className=\"account-avatar\">\r\n            <img src={defaultAvatar} className=\"account-avatar-inner\" />\r\n          </div>\r\n          <div className=\"avatar-title\">{\"{User Name}\"}</div>\r\n        </div>\r\n        <Link class={\"item \" + isDashboardActive} to=\"/Dashboard\">\r\n          <i class=\"block layout icon\"></i>Dashboard\r\n        </Link>\r\n        <Link class={\"item \" + isCreatetaskActive} to=\"/Create\">\r\n          <i class=\"book icon\"></i>Create Task\r\n        </Link>\r\n        <Link class={\"item \" + isIncompletedActive} to=\"/Incomplete\">\r\n          <i class=\"list icon\"></i>Incomplete Tasks\r\n        </Link>\r\n        <Link class={\"item \" + isCompletedActive} to=\"/Completed\">\r\n          <i class=\"tasks icon\"></i>Completed Tasks\r\n        </Link>\r\n        <Link class={\"item \" + isStarredActive} to=\"/Starred\">\r\n          <i class=\"star outline icon\"></i>Starred Tasks\r\n        </Link>\r\n        <Link class={\"item \" + isDeletedActive} to=\"/Deleted\">\r\n          <i class=\"trash alternate outline icon\"></i>Deleted Tasks\r\n        </Link>\r\n        <div className=\"copyright-text\">M. Talha Khalid © 2021</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\components\\TaskCard.js",[],"E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\screens\\CreateTask.js",["102"],"import React, { Component } from \"react\";\r\nimport { DateRangePicker } from \"react-date-range\";\r\n\r\nimport \"../styles/createtask.css\";\r\nimport \"react-date-range/dist/styles.css\"; // main style file\r\nimport \"react-date-range/dist/theme/default.css\"; // theme css file\r\n\r\nimport Sidebar from \"../components/Sidebar\";\r\nimport defaultAvatar from \"../assets/default-avatar.png\";\r\nimport history from \"../history\";\r\nimport Tasks from \"../API/Tasks\";\r\nimport AppModal from \"../components/AppModal\";\r\n\r\nexport default class CreateTask extends Component {\r\n  state = {\r\n    title: \"\",\r\n    titleError: null,\r\n    description: \"\",\r\n    descriptionError: null,\r\n    range: [\r\n      {\r\n        startDate: new Date(),\r\n        endDate: new Date(new Date().setDate(new Date().getDate() + 1)),\r\n        key: \"selection\",\r\n      },\r\n    ],\r\n    startTime:\r\n      (\"0\" + new Date().getHours()).slice(-2) +\r\n      \":\" +\r\n      (\"0\" + new Date().getMinutes()).slice(-2),\r\n    startTimeError: \"\",\r\n    endTime:\r\n      (\"0\" + new Date().getHours()).slice(-2) +\r\n      \":\" +\r\n      (\"0\" + new Date().getMinutes()).slice(-2),\r\n    endTimeError: \"\",\r\n    modalIsOpen: false,\r\n    successModal: false,\r\n    successModalConfig: {\r\n      iconClass: \"check circle outline icon\",\r\n      iconColor: \"#65E340\",\r\n      modalText: \"Congratulations! Task Added Successfully\",\r\n      buttonText: \"Continue\",\r\n    },\r\n    failModal: false,\r\n    failModalConfig: {\r\n      iconClass: \"times circle outline icon\",\r\n      iconColor: \"tomato\",\r\n      modalText: \"Oops! An Error Occured\",\r\n      buttonText: \"Try Again\",\r\n    },\r\n  };\r\n\r\n  addTaskHandler = async () => {\r\n    if (this.state.title.trim().length <= 0) {\r\n      return this.setState({ titleError: \"Title is required field\" });\r\n    }\r\n    if (this.state.title.trim().length < 10) {\r\n      return this.setState({\r\n        titleError: \"Title length must be minimum 10 characters\",\r\n      });\r\n    }\r\n    if (this.state.description.trim().length <= 0) {\r\n      return this.setState({\r\n        descriptionError: \"Description is required field\",\r\n      });\r\n    }\r\n    if (this.state.description.trim().length < 30) {\r\n      return this.setState({\r\n        descriptionError: \"Description length must be minimum 30 characters\",\r\n      });\r\n    }\r\n\r\n    const now = new Date();\r\n\r\n    if (\r\n      this.state.range[0].startDate.toLocaleDateString() ===\r\n      now.toLocaleDateString()\r\n    ) {\r\n      if (this.state.startTime < now.getHours() + \":\" + now.getMinutes())\r\n        return this.setState({ startTimeError: \"Invalid start time\" });\r\n    }\r\n\r\n    if (\r\n      this.state.range[0].endDate.toLocaleDateString() ===\r\n      now.toLocaleDateString()\r\n    ) {\r\n      if (this.state.endTime <= this.state.startTime)\r\n        return this.setState({ endTimeError: \"Invalid End time\" });\r\n    }\r\n\r\n    if (\r\n      !this.state.titleError &&\r\n      !this.state.descriptionError &&\r\n      !this.state.startTimeError &&\r\n      !this.state.endTimeError\r\n    ) {\r\n      let startDateTime = new Date();\r\n      let endDateTime = new Date();\r\n      startDateTime.setDate(this.state.range[0].startDate.getDate());\r\n      startDateTime.setHours(this.state.startTime.split(\":\")[0]);\r\n      startDateTime.setMinutes(this.state.startTime.split(\":\")[1]);\r\n      endDateTime.setDate(this.state.range[0].endDate.getDate());\r\n      endDateTime.setHours(this.state.endTime.split(\":\")[0]);\r\n      endDateTime.setMinutes(this.state.endTime.split(\":\")[1]);\r\n\r\n      try {\r\n        const res = await Tasks.post(\r\n          \"\",\r\n          {\r\n            title: this.state.title,\r\n            description: this.state.description,\r\n            startDateTime,\r\n            endDateTime,\r\n          },\r\n          { headers: { Authorization: localStorage.getItem(\"auth-token\") } }\r\n        );\r\n        if (res.status === 201) {\r\n          this.setState({\r\n            modalIsOpen: true,\r\n            successModal: true,\r\n            failModal: false,\r\n          });\r\n          // history.push(\"/Dashboard\");\r\n        }\r\n      } catch (e) {\r\n        this.setState({\r\n          modalIsOpen: true,\r\n          successModal: false,\r\n          failModal: true,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleCloseModal = () => {\r\n    if (this.state.successModal) {\r\n      this.setState({\r\n        modalIsOpen: false,\r\n        successModal: false,\r\n      });\r\n      history.push(\"/Dashboard\");\r\n    } else {\r\n      this.setState({\r\n        modalIsOpen: false,\r\n        failModal: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (localStorage.getItem(\"auth-token\")) {\r\n      const now = new Date();\r\n      return (\r\n        <div>\r\n          <Sidebar isCreatetaskActive=\"active\" />\r\n          <div className=\"pusher create-container\">\r\n            <div className=\"create-upper-segment\">\r\n              <div className=\"create-upper-segment-heading\">\r\n                Create a New Task\r\n              </div>\r\n              <div className=\"create-upper-segment-right\">\r\n                Id: {`{User ID}`}\r\n                <img\r\n                  className=\"create-upper-segment-avatar\"\r\n                  src={defaultAvatar}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"create-form\">\r\n              <div className=\"create-input-area\">\r\n                <div className=\"create-input-label\">Task Title:</div>\r\n                <input\r\n                  className=\"create-input\"\r\n                  placeholder=\"Title...\"\r\n                  required={true}\r\n                  maxLength={100}\r\n                  value={this.state.title}\r\n                  onChange={(elem) =>\r\n                    this.setState({\r\n                      titleError: null,\r\n                      title: elem.target.value,\r\n                    })\r\n                  }\r\n                />\r\n                <div className=\"create-input-error\">\r\n                  {this.state.titleError}\r\n                </div>\r\n              </div>\r\n              <div className=\"create-input-area\">\r\n                <div className=\"create-input-label\">Task Description:</div>\r\n                <textarea\r\n                  // className=\"create-input\"\r\n                  placeholder=\"Description...\"\r\n                  required={true}\r\n                  rows={3}\r\n                  maxLength={1000}\r\n                  value={this.state.description}\r\n                  onChange={(elem) =>\r\n                    this.setState({\r\n                      descriptionError: null,\r\n                      description: elem.target.value,\r\n                    })\r\n                  }\r\n                />\r\n                <div className=\"create-input-error\">\r\n                  {this.state.descriptionError}\r\n                </div>\r\n              </div>\r\n              <div className=\"create-input-area\">\r\n                <div className=\"create-input-label\">\r\n                  Set Due Date and Time (Max 30 Days):\r\n                </div>\r\n                <div className=\"create-duedate\">\r\n                  <div className=\"create-datepick\">\r\n                    <div className=\"create-datePick-label\">Set Date: </div>\r\n                    {/* <div\r\n                      className=\"create-input-error\"\r\n                      style={{ marginBottom: \"0px\" }}\r\n                    >\r\n                      hey error\r\n                    </div> */}\r\n                    <DateRangePicker\r\n                      ranges={this.state.range}\r\n                      onChange={(data) =>\r\n                        this.setState({ range: [data.selection] })\r\n                      }\r\n                      rangeColors={[\"#333\"]}\r\n                      months={2}\r\n                      direction=\"horizontal\"\r\n                      showMonthAndYearPickers={false}\r\n                      showDateDisplay={false}\r\n                      showPreview={false}\r\n                      minDate={now}\r\n                      maxDate={new Date(new Date().setDate(now.getDate() + 30))}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"create-timepick\">\r\n                  <div className=\"create-starttimepick\">\r\n                    <div className=\"create-starttimepick-label\">\r\n                      Set Start Date Time:\r\n                    </div>\r\n                    <input\r\n                      type=\"time\"\r\n                      className=\"create-time-input\"\r\n                      value={this.state.startTime}\r\n                      onChange={(elem) =>\r\n                        this.setState({\r\n                          startTimeError: null,\r\n                          startTime: elem.target.value,\r\n                        })\r\n                      }\r\n                    />\r\n                    <div className=\"create-input-error\">\r\n                      {this.state.startTimeError}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"create-endtimepick\">\r\n                    <div className=\"create-endtimepick-label\">\r\n                      Set End Date Time:\r\n                    </div>\r\n                    <input\r\n                      type=\"time\"\r\n                      className=\"create-time-input\"\r\n                      value={this.state.endTime}\r\n                      onChange={(elem) =>\r\n                        this.setState({\r\n                          endTimeError: null,\r\n                          endTime: elem.target.value,\r\n                        })\r\n                      }\r\n                    />\r\n                    <div className=\"create-input-error\">\r\n                      {this.state.endTimeError}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"create-button\" onClick={this.addTaskHandler}>\r\n                Add Task\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {this.state.successModal ? (\r\n            <AppModal\r\n              showModal={this.state.modalIsOpen}\r\n              handleCloseModal={this.handleCloseModal}\r\n              {...this.state.successModalConfig}\r\n            />\r\n          ) : (\r\n            <AppModal\r\n              showModal={this.state.modalIsOpen}\r\n              handleCloseModal={this.handleCloseModal}\r\n              {...this.state.failModalConfig}\r\n            />\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n    return <>{history.push(\"/Login\")}</>;\r\n  }\r\n}\r\n","E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\screens\\CompletedTasks.js",["103"],"import React, { Component } from \"react\";\r\nimport \"../styles/completedtasks.css\";\r\n\r\nimport Sidebar from \"../components/Sidebar\";\r\nimport defaultAvatar from \"../assets/default-avatar.png\";\r\nimport CompletedTaskCard from \"../components/CompletedTaskCard\";\r\nimport history from \"../history\";\r\n\r\nexport default class completedTasks extends Component {\r\n  state = { filterContentDisplay: \"none\" };\r\n\r\n  rangeClickHandler = () => {\r\n    // this.filterRef.current.style.display = \"none\";\r\n    this.setState({ filterContentDisplay: \"none\" });\r\n  };\r\n\r\n  filterClickHandler = () => {\r\n    // this.filterRef.current.style.display = \"block\";\r\n    this.setState({ filterContentDisplay: \"block\" });\r\n  };\r\n\r\n  render() {\r\n    if (localStorage.getItem(\"auth-token\")) {\r\n      return (\r\n        <div>\r\n          <Sidebar isCompletedActive=\"active\" />\r\n          <div className=\"pusher incompleted-container\">\r\n            <div className=\"completed-upper-segment\">\r\n              <div className=\"completed-upper-segment-heading\">\r\n                Completed Tasks\r\n              </div>\r\n              <div className=\"completed-upper-segment-right\">\r\n                Id: {`{User ID}`}\r\n                <img\r\n                  className=\"completed-upper-segment-avatar\"\r\n                  src={defaultAvatar}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"completed-middle-segment\">\r\n              <div class=\"ui category search completed-searchbar\">\r\n                <div class=\"ui icon input completed-searchbar-input\">\r\n                  <input\r\n                    class=\"prompt\"\r\n                    type=\"text\"\r\n                    placeholder=\"Search Task Title...\"\r\n                  />\r\n                  <i class=\"search icon\" style={{ cursor: \"pointer\" }}></i>\r\n                </div>\r\n                <div class=\"completed-filter\">\r\n                  <span\r\n                    className=\"completed-filter-button\"\r\n                    onClick={this.filterClickHandler}\r\n                  >\r\n                    <i class=\"filter icon\"></i> Filter Tasks\r\n                  </span>\r\n                  <div\r\n                    class=\"completed-filter-content\"\r\n                    style={{ display: this.state.filterContentDisplay }}\r\n                    // ref={this.filterRef}\r\n                  >\r\n                    <div className=\"filter-period-heading\">\r\n                      Filter periodically:\r\n                    </div>\r\n                    <div className=\"filter-period-choice\">Today Tasks</div>\r\n                    <div className=\"filter-period-choice\">This Week Tasks</div>\r\n                    <div className=\"filter-period-choice\">This Month Tasks</div>\r\n                    <div className=\"filter-period-heading\">\r\n                      Filter Using Date Range:\r\n                    </div>\r\n                    <div className=\"filter-period-date-area\">\r\n                      <div className=\"filter-period-date-heading\">\r\n                        Start Date:\r\n                      </div>\r\n                      <input type=\"date\" className=\"filter-period-date-input\" />\r\n                    </div>\r\n                    <div className=\"filter-period-date-area\">\r\n                      <div className=\"filter-period-date-heading\">\r\n                        End Date:\r\n                      </div>\r\n                      <input type=\"date\" className=\"filter-period-date-input\" />\r\n                    </div>\r\n                    <div\r\n                      className=\"filter-period-date-button\"\r\n                      onClick={this.rangeClickHandler}\r\n                    >\r\n                      Apply Range Filter\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"completed-remaining-text\">\r\n                Total Completed Tasks: {10}\r\n              </div>\r\n            </div>\r\n            <div className=\"completed-lower-segment\">\r\n              <div className=\"completed-tasks-list\">\r\n                <CompletedTaskCard />\r\n                <CompletedTaskCard />\r\n                <CompletedTaskCard />\r\n                <CompletedTaskCard />\r\n                <CompletedTaskCard />\r\n                <CompletedTaskCard />\r\n                <CompletedTaskCard />\r\n                <CompletedTaskCard />\r\n                <CompletedTaskCard />\r\n                <CompletedTaskCard />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return <>{history.push(\"/Login\")}</>;\r\n  }\r\n}\r\n","E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\components\\IncompleteTaskCard.js",[],"E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\components\\CompletedTaskCard.js",[],"E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\components\\AuthInputField.js",[],"E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\screens\\IncompleteTasks.js",["104"],"import React, { Component } from \"react\";\r\nimport \"../styles/incompletetasks.css\";\r\n\r\nimport Sidebar from \"../components/Sidebar\";\r\nimport defaultAvatar from \"../assets/default-avatar.png\";\r\nimport IncompleteTaskCard from \"../components/IncompleteTaskCard\";\r\nimport history from \"../history\";\r\n\r\nexport default class IncompleteTasks extends Component {\r\n  render() {\r\n    if (localStorage.getItem(\"auth-token\")) {\r\n      return (\r\n        <div>\r\n          <Sidebar isIncompletedActive=\"active\" />\r\n          <div className=\"pusher incompleted-container\">\r\n            <div className=\"incompleted-upper-segment\">\r\n              <div className=\"incompleted-upper-segment-heading\">\r\n                Incomplete Tasks\r\n              </div>\r\n              <div className=\"incompleted-upper-segment-right\">\r\n                Id: {`{User ID}`}\r\n                <img\r\n                  className=\"incompleted-upper-segment-avatar\"\r\n                  src={defaultAvatar}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"incompleted-middle-segment\">\r\n              <div class=\"ui category search incompleted-searchbar\">\r\n                <div class=\"ui icon input incompleted-searchbar-input\">\r\n                  <input\r\n                    class=\"prompt\"\r\n                    type=\"text\"\r\n                    placeholder=\"Search Task Title...\"\r\n                  />\r\n                  <i class=\"search icon\" style={{ cursor: \"pointer\" }}></i>\r\n                </div>\r\n              </div>\r\n              <div className=\"incompleted-remaining-text\">\r\n                Total Incomplete Tasks: {10}\r\n              </div>\r\n            </div>\r\n            <div className=\"incompleted-lower-segment\">\r\n              <div className=\"incompleted-tasks-list\">\r\n                <IncompleteTaskCard />\r\n                <IncompleteTaskCard />\r\n                <IncompleteTaskCard />\r\n                <IncompleteTaskCard />\r\n                <IncompleteTaskCard />\r\n                <IncompleteTaskCard />\r\n                <IncompleteTaskCard />\r\n                <IncompleteTaskCard />\r\n                <IncompleteTaskCard />\r\n                <IncompleteTaskCard />\r\n              </div>\r\n            </div>\r\n            {/* <div class=\"ui top attached tabular menu\">\r\n            <div class=\"item\">Tab1</div>\r\n            <div class=\"active item\">Tab2</div>\r\n          </div>\r\n          <div class=\"ui bottom attached active tab segment\">\r\n            <p>hello</p>\r\n            <p>tab</p>\r\n          </div> */}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return <>{history.push(\"/Login\")}</>;\r\n  }\r\n}\r\n","E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\API\\Users.js",[],"E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\config\\key.js",[],"E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\config\\prod.js",["105"],"E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\config\\dev.js",["106"],"export default {\r\n  userURL: \"http://localhost:5000/users\",\r\n  taskURL: \"http://localhost:5000/tasks\",\r\n};\r\n","E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\API\\Tasks.js",[],"E:\\All MERN related projects and stuffs\\Task Manager App MERN\\task-manager-client\\src\\components\\AppModal.js",[],{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"107","replacedBy":"111"},{"ruleId":"109","replacedBy":"112"},{"ruleId":"107","replacedBy":"113"},{"ruleId":"109","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":25,"column":17,"nodeType":"117","endLine":28,"endColumn":19},{"ruleId":"107","replacedBy":"118"},{"ruleId":"109","replacedBy":"119"},{"ruleId":"115","severity":1,"message":"116","line":22,"column":13,"nodeType":"117","endLine":22,"endColumn":73},{"ruleId":"115","severity":1,"message":"116","line":164,"column":17,"nodeType":"117","endLine":167,"endColumn":19},{"ruleId":"115","severity":1,"message":"116","line":34,"column":17,"nodeType":"117","endLine":37,"endColumn":19},{"ruleId":"115","severity":1,"message":"116","line":22,"column":17,"nodeType":"117","endLine":25,"endColumn":19},{"ruleId":"120","severity":1,"message":"121","line":1,"column":1,"nodeType":"122","endLine":4,"endColumn":3},{"ruleId":"120","severity":1,"message":"121","line":1,"column":1,"nodeType":"122","endLine":4,"endColumn":3},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],["123"],["124"],["123"],["124"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["123"],["124"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]